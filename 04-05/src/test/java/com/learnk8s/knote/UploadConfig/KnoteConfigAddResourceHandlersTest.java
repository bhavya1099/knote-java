
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type Open AI and AI Model gpt-3.5-turbo

ROOST_METHOD_HASH=addResourceHandlers_48286cc0db
ROOST_METHOD_SIG_HASH=addResourceHandlers_289a4a6d21

```
Scenario 1: Test adding a resource handler with default cache period

Details:
  TestName: testAddingResourceHandlerWithDefaultCachePeriod
  Description: Verify that the method adds a resource handler with the default cache period if not specified.
  Execution:
    Arrange: Mock the ResourceHandlerRegistry and properties object with a default upload directory.
    Act: Call addResourceHandlers method on KnoteConfig instance.
    Assert: Check that the resource handler is added with the default cache period of 3600 seconds.
  Validation:
    This test ensures that the method behaves correctly when the cache period is not explicitly set, providing the expected default behavior.

Scenario 2: Test adding a resource handler with custom cache period

Details:
  TestName: testAddingResourceHandlerWithCustomCachePeriod
  Description: Validate that the method correctly adds a resource handler with a custom cache period when specified.
  Execution:
    Arrange: Mock the ResourceHandlerRegistry and properties object with a custom upload directory and cache period.
    Act: Call addResourceHandlers method on KnoteConfig instance.
    Assert: Verify that the resource handler is added with the specified custom cache period.
  Validation:
    This scenario confirms that the method can accommodate and apply a user-defined cache period for the resource handler.

Scenario 3: Test adding a resource handler with resource chain disabled

Details:
  TestName: testAddingResourceHandlerWithResourceChainDisabled
  Description: Ensure that the method adds a resource handler with resource chain disabled when set to false.
  Execution:
    Arrange: Mock the ResourceHandlerRegistry and properties object with a specific upload directory and disable resource chain.
    Act: Invoke the addResourceHandlers method on KnoteConfig instance.
    Assert: Check that the resource handler is added with the resource chain disabled.
  Validation:
    This test guarantees that the method correctly handles the disabling of resource chaining for the resource handler.

Scenario 4: Test adding a resource handler with custom resolver

Details:
  TestName: testAddingResourceHandlerWithCustomResolver
  Description: Validate the addition of a custom resolver to the resource handler.
  Execution:
    Arrange: Mock the ResourceHandlerRegistry and properties object with a custom upload directory and resolver.
    Act: Call addResourceHandlers method on KnoteConfig instance.
    Assert: Ensure that the resource handler is added with the specified custom resolver.
  Validation:
    This scenario confirms that the method is capable of including a custom resolver as part of the resource handler configuration.

Scenario 5: Test adding a resource handler with non-default upload directory

Details:
  TestName: testAddingResourceHandlerWithNonDefaultUploadDir
  Description: Verify that the method correctly adds a resource handler with a non-default upload directory.
  Execution:
    Arrange: Mock the ResourceHandlerRegistry and properties object with a non-default upload directory.
    Act: Invoke the addResourceHandlers method on KnoteConfig instance.
    Assert: Check that the resource handler is added with the specified non-default upload directory.
  Validation:
    This test ensures that the method can handle and incorporate a custom upload directory into the resource handler configuration.
```
*/

// ********RoostGPT********

package com.learnk8s.knote.UploadConfig;

import org.junit.jupiter.api.Test;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.resource.PathResourceResolver;
import static org.mockito.Mockito.*;
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

public class KnoteConfigAddResourceHandlersTest {

	@Test
	public void testAddingResourceHandlerWithDefaultCachePeriod() {
		// Arrange
		ResourceHandlerRegistry registry = mock(ResourceHandlerRegistry.class);
		KnoteProperties properties = new KnoteProperties();
		properties.setUploadDir("defaultUploadDir");
		KnoteConfig knoteConfig = new KnoteConfig();
		knoteConfig.properties = properties;
		// Act
		knoteConfig.addResourceHandlers(registry);
		// Assert
		verify(registry).addResourceHandler("/uploads/**")
			.addResourceLocations("file:" + properties.getUploadDir())
			.setCachePeriod(3600)
			.resourceChain(true)
			.addResolver(any(PathResourceResolver.class));
	}

	@Test
	public void testAddingResourceHandlerWithCustomCachePeriod() {
		// Arrange
		ResourceHandlerRegistry registry = mock(ResourceHandlerRegistry.class);
		KnoteProperties properties = new KnoteProperties();
		properties.setUploadDir("customUploadDir");
		KnoteConfig knoteConfig = new KnoteConfig();
		knoteConfig.properties = properties;
		// Act
		knoteConfig.addResourceHandlers(registry);
		// Assert
		verify(registry).addResourceHandler("/uploads/**")
			.addResourceLocations("file:" + properties.getUploadDir())
			.setCachePeriod(1800)
			.resourceChain(true)
			.addResolver(any(PathResourceResolver.class));
	}

	@Test
	public void testAddingResourceHandlerWithResourceChainDisabled() {
		// Arrange
		ResourceHandlerRegistry registry = mock(ResourceHandlerRegistry.class);
		KnoteProperties properties = new KnoteProperties();
		properties.setUploadDir("specificUploadDir");
		KnoteConfig knoteConfig = new KnoteConfig();
		knoteConfig.properties = properties;
		// Act
		knoteConfig.addResourceHandlers(registry);
		// Assert
		verify(registry).addResourceHandler("/uploads/**")
			.addResourceLocations("file:" + properties.getUploadDir())
			.setCachePeriod(3600)
			.resourceChain(false)
			.addResolver(any(PathResourceResolver.class));
	}

	@Test
	public void testAddingResourceHandlerWithCustomResolver() {
		// Arrange
		ResourceHandlerRegistry registry = mock(ResourceHandlerRegistry.class);
		KnoteProperties properties = new KnoteProperties();
		properties.setUploadDir("customUploadDir");
		KnoteConfig knoteConfig = new KnoteConfig();
		knoteConfig.properties = properties;
		// Act
		knoteConfig.addResourceHandlers(registry);
		// Assert
		verify(registry).addResourceHandler("/uploads/**")
			.addResourceLocations("file:" + properties.getUploadDir())
			.setCachePeriod(3600)
			.resourceChain(true)
			.addResolver(any(PathResourceResolver.class));
	}

	@Test
	public void testAddingResourceHandlerWithNonDefaultUploadDir() {
		// Arrange
		ResourceHandlerRegistry registry = mock(ResourceHandlerRegistry.class);
		KnoteProperties properties = new KnoteProperties();
		properties.setUploadDir("nonDefaultUploadDir");
		KnoteConfig knoteConfig = new KnoteConfig();
		knoteConfig.properties = properties;
		// Act
		knoteConfig.addResourceHandlers(registry);
		// Assert
		verify(registry).addResourceHandler("/uploads/**")
			.addResourceLocations("file:" + properties.getUploadDir())
			.setCachePeriod(3600)
			.resourceChain(true)
			.addResolver(any(PathResourceResolver.class));
	}

}