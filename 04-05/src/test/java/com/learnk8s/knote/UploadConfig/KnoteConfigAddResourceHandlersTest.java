// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=addResourceHandlers_48286cc0db
ROOST_METHOD_SIG_HASH=addResourceHandlers_289a4a6d21
"""
  Scenario 1: Testing the addition of a resource handler

  Details:
    TestName: testAddingResourceHandler
    Description: This test checks whether the addResourceHandler method takes in the appropriate parameters and registers them accordingly.
  Execution:
    Arrange: Mock the instances of ResourceHandlerRegistry and KnoteProperties.
    Act: Invoke the addResourceHandlers method with the mocked parameters.
    Assert: Verify that the addResourceHandler method was called on the ResourceHandlerRegistry mock with the right parameters.
  Validation:
    This ensures that the ResourceHandlerRegistry correctly adds the resource handler provided. It validates that the method appears to be working correctly based on the given parameters, making it important in ensuring correct URL mapping.
  Scenario 2: Checking the functionality of addResourceLocations method

  Details:
    TestName: testAddingResourceLocations
    Description: This test aims to check if the addResourceLocations method points to the correct path location.
  Execution:
    Arrange: Mock the instances of ResourceHandlerRegistry and KnoteProperties. Set up specific return value for getUploadDir.
    Act: Invoke the addResourceHandlers method with the mocked parameters.
    Assert: Assert that the addResourceLocations was called with "file:" + properties.getUploadDir().
  Validation:
    This test is necessary to ensure that resources are being placed in the correct directory. Following the correct path guarantees that resources will be fetched accurately.
  Scenario 3: Verify the functionality of setCachePeriod

  Details:
    TestName: testSettingCachePeriod
    Description: This test verifies if the setCachePeriod method sets cache period to 3600 seconds as intended.
  Execution:
    Arrange: Mock the instances of ResourceHandlerRegistry and KnoteProperties.
    Act: Invoke the addResourceHandlers method with the mocked parameters.
    Assert: Assert that setCachePeriod() was called with argument 3600.
  Validation:
    Ensuring that cache period is set correctly helps in efficient loading of resources.
  Scenario 4: Validate the addition of resource resolver

  Details:
    TestName: testAdditionOfResourceResolver
    Description: This test validates if the new PathResourceResolver object is being added successfully.
  Execution:
    Arrange: Mock the instances of ResourceHandlerRegistry and KnoteProperties.
    Act: Invoke the method addResourceHandlers with the mocked parameters.
    Assert: Verify that the addResolver method was called with a new instance of PathResourceResolver.
  Validation:
    It is critical to validate that a new resource resolver is added correctly as it is responsible for locating resources by URL path safely.
  Scenario 5: Verify resourceChain method is called with true argument

  Details:
    TestName: testResourceChainArgument
    Description: This test validates that the resourceChain method is invoked with true argument.
  Execution:
    Arrange: Mock the instances of ResourceHandlerRegistry and KnoteProperties.
    Act: Call the addResourceHandlers method with the mocked parameters.
    Assert: Verify that the resourceChain method was called with argument true.
  Validation:
    Checking that the resourceChain method is invoked with true argument is necessary as it ensures that caching and other features work properly in the application.
"""
*/
// ********RoostGPT********
package com.learnk8s.knote;

import com.learnk8s.knote.model.KnoteConfig;
import com.learnk8s.knote.model.KnoteProperties;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.resource.PathResourceResolver;
import org.junit.experimental.categories.Category;

@Category({ Categories.addResourceHandlers.class, Categories.getUploadDir.class, Categories.roostTest1.class,
		Categories.roostTest2.class })
// Added imports for the missing classes.
@RunWith(MockitoJUnitRunner.class)
public class KnoteConfigAddResourceHandlersTest {

	private KnoteConfig knoteConfig = new KnoteConfig();

	@Mock
	private ResourceHandlerRegistry registry;

	@Mock
	private KnoteProperties properties;

	@Test
	public void testAddingResourceHandler() {
		doNothing().when(registry).addResourceHandler(anyString());
		knoteConfig.addResourceHandlers(registry);
		verify(registry, times(1)).addResourceHandler("/uploads/**");
	}

	@Test
    public void testAddingResourceLocations() {
        when(properties.getUploadDir()).thenReturn("/test/dir/");
        doNothing().when(registry).addResourceLocations(anyString());
        knoteConfig.setKnoteProperties(properties);
        knoteConfig.addResourceHandlers(registry);
        verify(registry, times(1)).addResourceLocations("file:" + properties.getUploadDir());
    }

	@Test
	public void testSettingCachePeriod() {
		doNothing().when(registry).setCachePeriod(anyInt());
		knoteConfig.addResourceHandlers(registry);
		verify(registry, times(1)).setCachePeriod(3600);
	}

	@Test
	public void testAdditionOfResourceResolver() {
		doNothing().when(registry).addResolver(any(PathResourceResolver.class));
		knoteConfig.addResourceHandlers(registry);
		verify(registry, times(1)).addResolver(any(PathResourceResolver.class));
	}

	@Test
	public void testResourceChainArgument() {
		doNothing().when(registry).resourceChain(anyBoolean());
		knoteConfig.addResourceHandlers(registry);
		verify(registry, times(1)).resourceChain(true);
	}

}