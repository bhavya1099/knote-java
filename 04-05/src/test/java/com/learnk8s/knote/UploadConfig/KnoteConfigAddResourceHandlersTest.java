
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=addResourceHandlers_48286cc0db
ROOST_METHOD_SIG_HASH=addResourceHandlers_289a4a6d21
"""
Scenario 1: Test when the property 'UploadDir' is set correctly
Details:
  TestName: testWhenUploadDirIsSetCorrectly
  Description: This test verifies that the addResourceHandlers method correctly registers the resource handler when the 'UploadDir' property is set correctly.
Execution:
  Arrange: Mock the properties object to return a valid directory path when getUploadDir() is called.
  Act: Call addResourceHandlers and pass the mocked registry object.
  Assert: Verify that 'addResourceHandler', 'addResourceLocations', 'setCachePeriod', 'resourceChain', and 'addResolver' methods are called on the registry object with the correct parameters.
Validation:
  This test confirms that the addResourceHandlers method correctly registers the resource handler when the 'UploadDir' property is set correctly. This is important as it ensures that resources are served from the correct directory.
Scenario 2: Test when the property 'UploadDir' is null
Details:
  TestName: testWhenUploadDirIsNull
  Description: This test verifies that the addResourceHandlers method throws an exception when the 'UploadDir' property is null.
Execution:
  Arrange: Mock the properties object to return null when getUploadDir() is called.
  Act: Call addResourceHandlers and pass the mocked registry object.
  Assert: Verify that an exception is thrown.
Validation:
  This test confirms that addResourceHandlers method correctly handles the scenario when the 'UploadDir' property is null by throwing an exception. This is important as it prevents the application from crashing in case of misconfiguration.
Scenario 3: Test when registry is null
Details:
  TestName: testWhenRegistryIsNull
  Description: This test verifies that the addResourceHandlers method throws an exception when the registry object is null.
Execution:
  Arrange: Pass null as the registry object.
  Act: Call addResourceHandlers method with null registry.
  Assert: Verify that an exception is thrown.
Validation:
  This test confirms that addResourceHandlers method correctly handles the scenario when the registry object is null by throwing an exception. This is important as it ensures that the application doesn't crash when it fails to register the resource handler.
"""
*/
// ********RoostGPT********
package com.learnk8s.knote.UploadConfig;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.resource.PathResourceResolver;
import static org.mockito.Mockito.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.junit.experimental.categories.Category;

@Category({ Categories.addResourceHandlers.class, Categories.getUploadDir.class, Categories.roostTestTag1.class,
		Categories.roostTestTag2.class })
@RunWith(MockitoJUnitRunner.class)
public class KnoteConfigAddResourceHandlersTest {

	private KnoteProperties properties = mock(KnoteProperties.class);

	private ResourceHandlerRegistry registry = mock(ResourceHandlerRegistry.class);

	private KnoteConfig knoteConfig = new KnoteConfig(properties);

	@Test
    public void testWhenUploadDirIsSetCorrectly() {
        // Arrange
        when(properties.getUploadDir()).thenReturn("/valid/directory/path");
        // Act
        knoteConfig.addResourceHandlers(registry);
        // Assert
        verify(registry).addResourceHandler("/uploads/**");
        verify(registry).addResourceLocations("file:/valid/directory/path");
        verify(registry).setCachePeriod(3600);
        verify(registry).resourceChain(true);
        verify(registry).addResolver(any(PathResourceResolver.class));
    }

	@Test(expected = IllegalArgumentException.class)
    public void testWhenUploadDirIsNull() {
        // Arrange
        when(properties.getUploadDir()).thenReturn(null);
        // Act
        knoteConfig.addResourceHandlers(registry);
    }

	@Test(expected = NullPointerException.class)
	public void testWhenRegistryIsNull() {
		// Arrange
		// No arrangement required for this test
		// Act
		knoteConfig.addResourceHandlers(null);
	}

}