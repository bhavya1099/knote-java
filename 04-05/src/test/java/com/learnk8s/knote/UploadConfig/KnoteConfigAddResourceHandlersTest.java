
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=addResourceHandlers_48286cc0db
ROOST_METHOD_SIG_HASH=addResourceHandlers_289a4a6d21
"""
Scenario 1: Test when the property 'UploadDir' is set correctly
Details:
  TestName: testWhenUploadDirIsSetCorrectly
  Description: This test verifies that the addResourceHandlers method correctly registers the resource handler when the 'UploadDir' property is set correctly.
Execution:
  Arrange: Mock the properties object to return a valid directory path when getUploadDir is called.
  Act: Invoke the addResourceHandlers method on the registry object.
  Assert: Verify that addResourceHandler, addResourceLocations, setCachePeriod, resourceChain, and addResolver methods are called with the correct parameters on the registry object.
Validation:
  This test case validates that the method correctly sets up the resource handler when the 'UploadDir' property is correctly set. This is important because if the resource handler is not correctly set, the application will not be able to serve static resources from the specified directory.
Scenario 2: Test when the property 'UploadDir' is not set
Details:
  TestName: testWhenUploadDirIsNotSet
  Description: This test verifies that the addResourceHandlers method throws an exception when the 'UploadDir' property is not set.
Execution:
  Arrange: Mock the properties object to return null when getUploadDir is called.
  Act: Invoke the addResourceHandlers method on the registry object.
  Assert: Expect an exception to be thrown.
Validation:
  This test case validates that the method throws an exception when the 'UploadDir' property is not set. This is important because if the 'UploadDir' property is not set, the application will not be able to determine where to serve static resources from.
Scenario 3: Test when the property 'UploadDir' is set to an invalid directory
Details:
  TestName: testWhenUploadDirIsInvalid
  Description: This test verifies that the addResourceHandlers method throws an exception when the 'UploadDir' property is set to an invalid directory.
Execution:
  Arrange: Mock the properties object to return an invalid directory path when getUploadDir is called.
  Act: Invoke the addResourceHandlers method on the registry object.
  Assert: Expect an exception to be thrown.
Validation:
  This test case validates that the method throws an exception when the 'UploadDir' property is set to an invalid directory. This is important because if the 'UploadDir' property is set to an invalid directory, the application will not be able to serve static resources from the specified directory.
"""
*/
// ********RoostGPT********
package com.learnk8s.knote.UploadConfig;

import static org.mockito.Mockito.*;
import org.junit.Test;
import org.junit.Rule;
import org.junit.rules.ExpectedException;
import org.junit.experimental.categories.Category;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.resource.PathResourceResolver;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.junit.experimental.categories.Category;

@Category({ Categories.addResourceHandlers.class, Categories.getUploadDir.class, Categories.roostTestTag1.class,
		Categories.roostTestTag2.class })
public class KnoteConfigAddResourceHandlersTest {

	@Autowired
	private KnoteProperties properties;

	@Rule
	public ExpectedException thrown = ExpectedException.none();

	@Test
	@Category(Categories.valid.class)
	public void testWhenUploadDirIsSetCorrectly() {
		String uploadDir = "/valid/path";
		when(properties.getUploadDir()).thenReturn(uploadDir);
		ResourceHandlerRegistry registry = mock(ResourceHandlerRegistry.class);
		new KnoteConfig(properties).addResourceHandlers(registry);
		verify(registry).addResourceHandler("/uploads/**");
		verify(registry).addResourceLocations("file:" + uploadDir);
		verify(registry).setCachePeriod(3600);
		verify(registry).resourceChain(true);
		verify(registry).addResolver(any(PathResourceResolver.class));
	}

	@Test
    @Category(Categories.invalid.class)
    public void testWhenUploadDirIsNotSet() {
        when(properties.getUploadDir()).thenReturn(null);
        ResourceHandlerRegistry registry = mock(ResourceHandlerRegistry.class);
        thrown.expect(IllegalArgumentException.class);
        new KnoteConfig(properties).addResourceHandlers(registry);
    }

	@Test
	@Category(Categories.boundary.class)
	public void testWhenUploadDirIsInvalid() {
		String invalidDir = "/invalid/path";
		when(properties.getUploadDir()).thenReturn(invalidDir);
		ResourceHandlerRegistry registry = mock(ResourceHandlerRegistry.class);
		thrown.expect(IllegalArgumentException.class);
		new KnoteConfig(properties).addResourceHandlers(registry);
	}

}