# ********RoostGPT********

# Test generated by RoostGPT for test integration-scenarioTab-test using AI Type  and AI Model 
# 
# ROOST_METHOD_HASH=dc03be64e0
# ROOST_METHOD_SIG_HASH=3c477b173d
# 
#  ########## Scenario ########## 
# 
# {
#   feature: 'Feature: Check broadband service availability and selection',
#   background: 'Background: \n' +
#     '    Given a customer base where each customer has a unique subscriber ID',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Customer checks broadband availability for an address',
#     steps: 'Given "John Doe" has a subscriber ID "SVTL001"\n' +
#       'And he wants to check broadband availability for address "14393"\n' +
#       'When John sends a request to check availability\n' +
#       'Then the system should validate the address\n' +
#       'And fetch the broadband availability\n' +
#       'And return a list of available broadband packages',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
Feature: Check broadband service availability and selection

  Background:
    * def RESOURCEPOOLMANAGEMENT_DB0413CB31_URL = karate.properties['RESOURCEPOOLMANAGEMENT_DB0413CB31_URL'] || karate.get('RESOURCEPOOLMANAGEMENT_DB0413CB31_URL', 'http://localhost:4010')
    * url RESOURCEPOOLMANAGEMENT_DB0413CB31_URL
    * def RESOURCEPOOLMANAGEMENT_DB0413CB31_AUTH_TOKEN = karate.properties['RESOURCEPOOLMANAGEMENT_DB0413CB31_AUTH_TOKEN'] || karate.get('RESOURCEPOOLMANAGEMENT_DB0413CB31_AUTH_TOKEN', 'Bearer_Dummy_Token')
    * configure headers = { Authorization: #(RESOURCEPOOLMANAGEMENT_DB0413CB31_AUTH_TOKEN) }

  Scenario: Customer checks broadband availability for an address with valid data
    Given path '/availabilityCheck'
    And request
      """
      { 
        customer: 'John Doe', 
        address: '14393' 
      }
      """
    When method post
    Then status 200
    And match response ==
      """
      { 
        control: '#object', 
        'control.type': '#string', 
        'control.message': '#string', 
        'control.code': '#string', 
        resource: '#object',
        resource: 
        { 
          inventoryId: '#number', 
          maxBandwidth: '#number', 
          availabilityType: '#number', 
          availabilityCode: '#number', 
          availabilityDescription: '#string' 
        }
      }
      """

  Scenario: Customer checks broadband availability for an address with invalid data
    Given path '/availabilityCheck'
    And request
      """
      { 
        customer: 'Invalid', 
        address: '00000' 
      }
      """
    When method post
    Then status 400
    And match response ==
      """
      { 
        type: '#string', 
        message: '#string', 
        code: '#string' 
      }
      """

  Scenario: Unauthorized access attempt to broadband availability check
    Given path '/availabilityCheck'
    And request
      """
      { 
        customer: 'John Doe', 
        address: '14393' 
      }
      """
    And configure headers = { Authorization: 'Invalid_Token' }
    When method post
    Then status 401
    And match response ==
      """
      { 
        type: '#string', 
        message: '#string', 
        code: '#string' 
      }
      """

  Scenario: Request broadband availability check during server downtime
    Given path '/availabilityCheck'
    And request
      """
      { 
        customer: 'John Doe', 
        address: '14393' 
      }
      """
    When method post
    Then status 503
    And match response ==
      """
      { 
        type: '#string', 
        message: '#string', 
        code: '#string' 
      }
      """
