# ********RoostGPT********

# Test generated by RoostGPT for test karate-test using AI Type Open AI and AI Model gpt-4-turbo
# 
# Feature file generated for /configuration_post for http method type POST 
# RoostTestHash=f72d56dc59
# 
# 

# ********RoostGPT********
Feature: Activation and Configuration Service

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']
    * header Authorization = 'Bearer ' + authToken

  Scenario Outline: Configure service with different parameters
    Given path '/configuration'
    And request
      """
      <body>
      """
    When method post
    Then status <expectedStatus>
    And match response ==
      """
      <expectedResponse>
      """

    Examples:
      | read('configuration_post.csv') |

  Scenario: Unauthorized access to configuration service
    Given path '/configuration'
    And request
      """
      { "configuration": { "action": { "type": "HGW_WIFI_ENABLE", "parameters": { "frequencyBand": "2.4GHz" } }, "customer": { "subscriberId": "SVTAL001" } } }
      """
    And header Authorization = 'Bearer invalid_token'
    When method post
    Then status 401
    And match response ==
      """
      { "control": { "type": "E", "code": 401, "message": "Unauthorized" } }
      """

  Scenario: Bad request to configuration service
    Given path '/configuration'
    And request
      """
      { "configuration": { "action": { "type": "INVALID_TYPE" }, "customer": { "subscriberId": "SVTAL001" } } }
      """
    When method post
    Then status 400
    And match response ==
      """
      { "control": { "type": "E", "code": 400, "message": "Bad Request" } }
      """
