# ********RoostGPT********

# Test generated by RoostGPT for test karate-test using AI Type Open AI and AI Model gpt-4-turbo
# 
# ROOST_METHOD_HASH=dc03be64e0
# ROOST_METHOD_SIG_HASH=3c477b173d
# 
#  ########## Scenario ########## 
# 
# {
#   feature: 'Feature: Check broadband service availability and selection',
#   background: 'Background: \n' +
#     '    Given a customer base where each customer has a unique subscriber ID',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Customer checks broadband availability for an address',
#     steps: 'Given "John Doe" has a subscriber ID "SVTL001"\n' +
#       'And he wants to check broadband availability for address "14393"\n' +
#       'When John sends a request to check availability\n' +
#       'Then the system should validate the address\n' +
#       'And fetch the broadband availability\n' +
#       'And return a list of available broadband packages',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
Feature: Check broadband service availability and selection

  Background:
    * def RESOURCEPOOLMANAGEMENT_DB0413CB31_URL = karate.properties['RESOURCEPOOLMANAGEMENT_DB0413CB31_URL'] || karate.get('RESOURCEPOOLMANAGEMENT_DB0413CB31_URL', 'http://localhost:4010')
    * def RESOURCEPOOLMANAGEMENT_DB0413CB31_AUTH_TOKEN = karate.properties['RESOURCEPOOLMANAGEMENT_DB0413CB31_AUTH_TOKEN'] || karate.get('RESOURCEPOOLMANAGEMENT_DB0413CB31_AUTH_TOKEN', 'Bearer_Dummy_Token')

  Scenario: Customer checks broadband availability for an address
    * url RESOURCEPOOLMANAGEMENT_DB0413CB31_URL
    And path '/availabilityCheck'
    And header Authorization = 'Bearer ' + RESOURCEPOOLMANAGEMENT_DB0413CB31_AUTH_TOKEN
    And a customer base where each customer has a unique subscriber ID
    And "John Doe" has a subscriber ID "SVTL001"
    And he wants to check broadband availability for address "14393"
    * def requestBody = { customer: 'John Doe', address: '14393' }
    When method post
    * request requestBody
    Then status 200
    And match response.control.type == '#string'
    And match response.control.message == '#string'
    And match response.control.code == '#string'
    And match response.resource.resource.inventoryId == '#number'
    And match response.resource.resource.maxBandwidth == '#number'
    And match response.resource.resource.availabilityType == '#number'
    And match response.resource.resource.availabilityCode == '#number'
    And match response.resource.resource.availabilityDescription == '#string'
    And match response.resource.resource.products == '#object'

  Scenario: Customer checks broadband availability with invalid address
    * url RESOURCEPOOLMANAGEMENT_DB0413CB31_URL
    And path '/availabilityCheck'
    And header Authorization = 'Bearer ' + RESOURCEPOOLMANAGEMENT_DB0413CB31_AUTH_TOKEN
    And a customer base where each customer has a unique subscriber ID
    * def requestBody = { customer: 'John Doe', address: 'Invalid' }
    When method post
    * request requestBody
    Then status 400
    And match response.type == '#string'
    And match response.message == '#string'
    And match response.code == '#string'
