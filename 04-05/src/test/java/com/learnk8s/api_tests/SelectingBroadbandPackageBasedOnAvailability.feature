# ********RoostGPT********

# Test generated by RoostGPT for test integration-scenarioTab-test using AI Type Open AI and AI Model gpt-4-turbo
# 
# ROOST_METHOD_HASH=9adbc3cb1f
# ROOST_METHOD_SIG_HASH=b70f07ae36
# 
#  ########## Scenario ########## 
# 
# {
#   feature: 'Feature: Check broadband service availability and selection',
#   background: 'Background: \n' +
#     '    Given a customer base where each customer has a unique subscriber ID',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Selecting a broadband package based on availability',
#     steps: 'Given "John Doe" received the broadband availability report\n' +
#       'And he finds that "BL_1000MB" broadband speed is available at his address\n' +
#       'When John selects the "BL_1000MB" package\n' +
#       'Then the system should validate the selection\n' +
#       "And confirm the broadband package for John's address",
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
Feature: Check broadband service availability and selection

  Background:
    * def RESOURCEPOOLMANAGEMENT_DB0413CB31_URL = karate.properties['RESOURCEPOOLMANAGEMENT_DB0413CB31_URL'] || karate.get('RESOURCEPOOLMANAGEMENT_DB0413CB31_URL', 'http://localhost:4010')
    * def RESOURCEPOOLMANAGEMENT_DB0413CB31_AUTH_TOKEN = karate.properties['RESOURCEPOOLMANAGEMENT_DB0413CB31_AUTH_TOKEN'] || karate.get('RESOURCEPOOLMANAGEMENT_DB0413CB31_AUTH_TOKEN', 'Bearer_Dummy_Token')

  Scenario: Selecting a broadband package based on availability with valid inputs
    * url RESOURCEPOOLMANAGEMENT_DB0413CB31_URL
    And path '/availabilityCheck'
    And header Authorization = RESOURCEPOOLMANAGEMENT_DB0413CB31_AUTH_TOKEN
    And request
      """
      { 
        customer: 'John Doe', 
        address: '123 Maple St' 
      }
      """
    When method post
    Then status 200
    And match response ==
      """
      { 
        control: '#object', 
        resource: '#object' 
      }
      """
    And match response.control.type == '#string'
    And match response.control.message == '#string'
    And match response.control.code == '#string'
    And match response.resource.resource.inventoryId == '#number'
    And match response.resource.resource.maxBandwidth == '#number'
    And match response.resource.resource.availabilityType == '#number'
    And match response.resource.resource.availabilityCode == '#number'
    And match response.resource.resource.availabilityDescription == '#string'

  Scenario: Selecting a broadband package based on availability with invalid customer details
    * url RESOURCEPOOLMANAGEMENT_DB0413CB31_URL
    And path '/availabilityCheck'
    And header Authorization = RESOURCEPOOLMANAGEMENT_DB0413CB31_AUTH_TOKEN
    And request
      """
      { 
        customer: '', 
        address: '123 Maple St' 
      }
      """
    When method post
    Then status 400
    And match response ==
      """
      { 
        type: '#string', 
        message: '#string', 
        code: '#string' 
      }
      """

  Scenario: Selecting a broadband package without authorization token
    * url RESOURCEPOOLMANAGEMENT_DB0413CB31_URL
    And path '/availabilityCheck'
    And request
      """
      { 
        customer: 'John Doe', 
        address: '123 Maple St' 
      }
      """
    When method post
    Then status 401
    And match response ==
      """
      { 
        type: '#string', 
        message: '#string', 
        code: '#string' 
      }
      """
