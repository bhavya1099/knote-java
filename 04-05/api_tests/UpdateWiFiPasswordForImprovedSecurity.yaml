# ********RoostGPT********

# Test generated by RoostGPT for test karate-test using AI Type Open AI and AI Model gpt-4-turbo
# 
# ROOST_METHOD_HASH=5a02b01fca
# ROOST_METHOD_SIG_HASH=9c8324b0ac
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: WiFi Troubleshooting for Fiber Internet Customers',
#   background: 'Background:\n' +
#     '    Given the customer support representative has access to the service activation and configuration API\n' +
#     '    And the customer support representative has access to the service test management API',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Update WiFi password for improved security',
#     steps: 'Given a customer with subscriber ID "SVTAL003" requests a WiFi password change\n' +
#       'When the support representative uses the configuration API to set a new WiFi password\n' +
#       'Then the configuration API should return a success response\n' +
#       'And the customer should be able to connect to the WiFi network with the new password',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 60
      arrivalRate: 1
  environments:
    development:
      target: "http://dev.api.example.com"
    staging:
      target: "http://staging.api.example.com"
    production:
      target: "http://api.example.com"
  payload:
    path: "UpdateWiFiPasswordForImprovedSecurity.csv"
    fields:
      - "subscriberId"
      - "newPassword"
    skipHeader: true
    delimiter: "^|^"
  plugins:
    expect: {}

scenarios:
  - name: "scenario-update-wifi-password-success"
    flow:
      - post:
          url: "/configuration/setWifiPassword"
          json:
            subscriberId: "{{ subscriberId }}"
            newPassword: "{{ newPassword }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          log: "Updating WiFi password for subscriber ID SVTAL003"
          expect:
            - statusCode: 200
            - json:
                result: "Password update successful"
      - think: 1
      - get:
          url: "/service/testConnection?subscriberId={{ subscriberId }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          log: "Testing new WiFi password connection for subscriber ID SVTAL003"
          expect:
            - statusCode: 200
            - json:
                connectionStatus: "Connected"

  - name: "scenario-update-wifi-password-failure"
    flow:
      - post:
          url: "/configuration/setWifiPassword"
          json:
            subscriberId: "{{ subscriberId }}"
            newPassword: "{{ newPassword }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          log: "Attempting to update WiFi password with invalid data for subscriber ID SVTAL003"
          expect:
            - statusCode: 400
            - json:
                error: "Invalid request data"
      - think: 1
      - get:
          url: "/service/testConnection?subscriberId={{ subscriberId }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          log: "Testing connection with unchanged password due to failed update for subscriber ID SVTAL003"
          expect:
            - statusCode: 200
            - json:
                connectionStatus: "Connected with old password"
