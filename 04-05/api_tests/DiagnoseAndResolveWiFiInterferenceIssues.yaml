# ********RoostGPT********

# Test generated by RoostGPT for test karate-test using AI Type Open AI and AI Model gpt-4-turbo
# 
# ROOST_METHOD_HASH=ee0418c08a
# ROOST_METHOD_SIG_HASH=1c092be52c
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: WiFi Troubleshooting for Fiber Internet Customers',
#   background: 'Background:\n' +
#     '    Given the customer support representative has access to the service activation and configuration API\n' +
#     '    And the customer support representative has access to the service test management API',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Diagnose and resolve WiFi interference issues',
#     steps: 'Given a customer with subscriber ID "SVTAL004" reports slow WiFi speeds\n' +
#       'When the support representative initiates a diagnostic test\n' +
#       'Then the service test API should return a test ID\n' +
#       'And the diagnostic result should indicate WiFi interference on the current channel\n' +
#       'When the support representative uses the configuration API to change the WiFi channel to an less congested one\n' +
#       'Then the configuration API should return a success response\n' +
#       'And the customer should report improved WiFi speeds',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 60
      arrivalRate: 1
  environments:
    staging:
      target: "https://staging.example.com"
  payload:
    path: "DiagnoseAndResolveWiFiInterferenceIssues.csv"
    fields:
      - "subscriberId"
      - "newChannel"
    skipHeader: true
    delimiter: "^|^"
  plugins:
    expect: {}

scenarios:
  - name: scenario_diagnose_and_resolve_wifi_interference
    flow:
      - post:
          url: "/serviceTest/initiate"
          json:
            subscriberId: "{{ subscriberId }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          log: "Initiating diagnostic test for subscriber ID {{ subscriberID }}"
          expect:
            - statusCode: 200
            - jsonPath: "$.testId"
      - think: 1
      - post:
          url: "/serviceTest/results"
          json:
            testId: "{{ testId }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          log: "Fetching diagnostic results for test ID {{ testId }}"
          expect:
            - statusCode: 200
            - jsonPath: "$.result"
              value: "WiFi interference detected"
      - think: 1
      - post:
          url: "/serviceConfiguration/changeChannel"
          json:
            subscriberId: "{{ subscriberId }}"
            newChannel: "{{ newChannel }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          log: "Changing WiFi channel to less congested one for subscriber ID {{ subscriberId }}"
          expect:
            - statusCode: 200
            - bodyContains: "success"
      - think: 1
      - log: "Expected outcome: Configuration API should return success and customer reports improved WiFi speeds."
